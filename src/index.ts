import { Bot, Context, session } from "grammy";
import { createDataSource } from "./database";
import { logger } from "./logger";
import {
  conversations,
  createConversation,
  type ConversationFlavor,
} from "@grammyjs/conversations";
import { feedback } from "./conversations/feedback";
import { onboardingMenu } from "menus/onboarding.menu";
import { onboarding } from "conversations/onboarding";

export type MyContext = Context &
  ConversationFlavor<Context> & { session: { onboardingIndex: number } };

export const bot = new Bot<MyContext>(process.env.BOT_TOKEN || "");
export const db = createDataSource({ logger });

bot.use(conversations());
bot.use(session({ initial: () => ({ onboardingIndex: 0 }) }));

bot.use(createConversation<MyContext, MyContext>(feedback));
bot.use(createConversation<MyContext, MyContext>(onboarding));

bot.use(onboardingMenu);

const ADMIN_IDS: number[] = [931916742];

bot.command("menu", async (ctx) => {
  await ctx.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-–•–û–ó–Ø–ï–í–ê! –°–µ–π—á–∞—Å —Ç—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è —Å —á–∞—Ç–∞–º–∏.",
    { reply_markup: onboardingMenu }
  );
});

bot.command("start", async (ctx) => {
  await ctx.conversation.enter("onboarding");
});

bot.command("add_event", async (ctx) => {
  if (!ADMIN_IDS.includes(ctx.from?.id || 0)) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è");
    return;
  }

  if (!ctx.message || !ctx.message.text) {
    await ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
    return;
  }

  const args = ctx.message.text.split("\n");
  if (args.length < 4) {
    await ctx.reply(
      "–§–æ—Ä–º–∞—Ç: /add_event\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–î–∞—Ç–∞ (YYYY-MM-DD)\n–û–ø–∏—Å–∞–Ω–∏–µ"
    );
    return;
  }

  try {
    await db
      .insertInto("event")
      .values({
        id: 0,
        name: args[1],
        date: new Date(args[2]).toISOString(),
        description: args[3],
      })
      .execute();
    await ctx.reply("–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
  } catch (error) {
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è");
  }
});

bot.command("list_events", async (ctx) => {
  const events = await db
    .selectFrom("event")
    .selectAll()
    .orderBy("date", "asc")
    .execute();

  if (events.length === 0) {
    await ctx.reply("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π");
    return;
  }

  const eventsList = events
    .map(
      (e) =>
        `üìÖ ${e.name}\nüìç ${e.date.toLocaleDateString()}\nüìù ${e.description}`
    )
    .join("\n\n");

  await ctx.reply(eventsList);
});

bot.command("view_feedback", async (ctx) => {
  if (!ADMIN_IDS.includes(ctx.from?.id || 0)) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å");
    return;
  }

  const feedback = await db
    .selectFrom("feedback")
    .selectAll()
    .orderBy("createdAt", "desc")
    .execute();

  if (feedback.length === 0) {
    await ctx.reply("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
    return;
  }

  const feedbackList = feedback
    .map(
      (f) =>
        `–û—Ç: ${f.username || f.userId}\nüìù ${
          f.message
        }\nüìÖ ${f.createdAt.toLocaleDateString()}`
    )
    .join("\n\n");

  await ctx.reply(feedbackList);
});

bot.command("feedback", async (ctx) => {
  await ctx.conversation.enter("feedback");
});

bot.command("admin", async (ctx) => {
  await ctx.conversation.enter("adminConversation");
});

bot.command("cancel", async (ctx) => {
  await ctx.conversation.exitAll();
});

bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
});

bot.start();
console.log("Bot started!");
