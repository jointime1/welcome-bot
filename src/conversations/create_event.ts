import type { Conversation } from "@grammyjs/conversations";
import { db, type MyContext } from "index";

export async function createEvent(
  conversation: Conversation<MyContext, MyContext>,
  ctx: MyContext
) {
  // Check if user is admin
  const ADMIN_IDS: number[] = [931916742]; // This should match the admin IDs in index.ts
  if (!ADMIN_IDS.includes(ctx.from?.id || 0)) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è");
    return;
  }

  // Step 1: Ask for event name
  await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:");
  const { message: nameMsg } = await conversation.waitFor("message:text");
  const eventName = nameMsg.text;

  // Step 2: Ask for event date
  await ctx.reply(
    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-03-15):"
  );
  
  let eventDate: Date | null = null;
  while (!eventDate) {
    const { message: dateMsg } = await conversation.waitFor("message:text");
    try {
      eventDate = new Date(dateMsg.text);
      // Check if date is valid
      if (isNaN(eventDate.getTime())) {
        await ctx.reply(
          "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD:"
        );
        eventDate = null;
      }
    } catch (error) {
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD:"
      );
      eventDate = null;
    }
  }

  // Step 3: Ask for event description
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:");
  const { message: descMsg } = await conversation.waitFor("message:text");
  const eventDescription = descMsg.text;

  // Step 4: Confirm event details
  await ctx.reply(
    `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n` +
    `üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${eventName}\n` +
    `üìÜ –î–∞—Ç–∞: ${eventDate.toLocaleDateString()}\n` +
    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${eventDescription}\n\n` +
    `–í—Å–µ –≤–µ—Ä–Ω–æ?`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–î–∞, —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data: "create_yes" }],
          [{ text: "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data: "create_no" }],
        ],
      },
    }
  );

  // Step 5: Process confirmation
  const cq = await conversation.waitFor("callback_query:data");
  const callbackData = cq.callbackQuery.data;
  
  if (callbackData === "create_yes") {
    try {
      await db
        .insertInto("event")
        .values({
          name: eventName,
          date: eventDate.toISOString(),
          description: eventDescription,
        })
        .execute();
      
      await ctx.reply("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!");
      
      // Notify about successful creation
      await ctx.answerCallbackQuery("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
    } catch (error) {
      console.error("Error creating event:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.");
      await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
    }
  } else {
    await ctx.reply("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.");
    await ctx.answerCallbackQuery("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ");
  }
}
