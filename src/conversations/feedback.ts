import type { Conversation } from "@grammyjs/conversations";
import { db, type MyContext } from "index";
import { onboardingMenu } from "menus/onboarding.menu";

export async function feedback(
  conversation: Conversation<MyContext, MyContext>,
  ctx: MyContext
) {
  await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
  );

  let state = true;
  let msg;

  while (state) {
    const { message: userMessage } = await conversation.waitFor("message:text");

    await ctx.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–î–∞", callback_data: "confirm_yes" }],
          [{ text: "–ù–µ—Ç", callback_data: "confirm_no" }],
        ],
      },
    });
    const cq = await conversation.waitFor("callback_query:data");
    const callbackData = cq.callbackQuery.data;
    console.log(callbackData);

    if (callbackData === "confirm_yes") {
      msg = userMessage;
      state = false;
    } else {
      await ctx.reply("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∑–∞–Ω–æ–≤–æ:");
    }
  }

  if (!ctx.from) {
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.");
    return;
  }

  try {
    await db
      .insertInto("feedback")
      .values({
        message: msg?.text || "",
        userId: ctx.from.id.toString(),
        username: ctx.from.username,
        createdAt: new Date().toISOString(),
      })
      .execute();
    await ctx.reply("‚úÖ –û—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!");
  } catch (error) {
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞");
  }
}
