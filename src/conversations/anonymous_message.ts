import type { Conversation } from "@grammyjs/conversations";
import { db, type MyContext } from "index";

const CONVERSATION_ID = -1002252250331;

export async function anonymousMessage(
  conversation: Conversation<MyContext, MyContext>,
  ctx: MyContext
) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!ctx.from) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ü–µ–ª–µ–≤–æ–π –±–µ—Å–µ–¥—ã
  try {
    const chatMember = await ctx.api.getChatMember(
      CONVERSATION_ID,
      ctx.from.id
    );

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (
      chatMember.status === "left" ||
      chatMember.status === "kicked" ||
      chatMember.status === "restricted"
    ) {
      await ctx.reply(
        "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –±–µ—Å–µ–¥—ã IT-X: –ù–æ–≤–∏—á–∫–∏ –≤ IT. –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
      );
      return;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–µ—Å–µ–¥—ã:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–µ—Å–µ–¥–µ.");
    return;
  }

  // –ó–∞–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  await ctx.reply(
    `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–µ—Å–µ–¥—É –∞–Ω–æ–Ω–∏–º–Ω–æ.
–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å—Ç—Ä–∞—Ö–∞ "—Ç—É–ø–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞". –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é!    
    `
  );

  let state = true;
  let msg;

  while (state) {
    const { message: userMessage } = await conversation.waitFor("message:text");

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await ctx.reply(
      "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–î–∞", callback_data: "confirm_yes" }],
            [{ text: "–ù–µ—Ç", callback_data: "confirm_no" }],
          ],
        },
      }
    );

    const cq = await conversation.waitFor("callback_query:data");
    const callbackData = cq.callbackQuery.data;

    if (callbackData === "confirm_yes") {
      msg = userMessage;
      state = false;
    } else {
      await ctx.reply("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:");
    }
  }

  try {
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ tg_id
    let user = await db
      .selectFrom("users")
      .select("id")
      .where("tg_id", "=", ctx.from.id)
      .executeTakeFirst();

    if (!user) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      const newUser = await db
        .insertInto("users")
        .values({
          tg_id: ctx.from.id,
          tg_username: ctx.from.username || "",
          first_name: ctx.from.first_name,
          last_name: ctx.from.last_name || null,
          created_at: new Date().toISOString(),
        })
        .returning("id")
        .executeTakeFirst();

      if (!newUser) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.");
        return;
      }

      user = newUser;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db
      .insertInto("anonymous_message")
      .values({
        user_id: user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π user_id
        username: ctx.from.username || "",
        message: msg?.text || "",
        created_at: new Date().toISOString(),
      })
      .execute();

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤—É—é –±–µ—Å–µ–¥—É
    try {
      await ctx.api.sendMessage(
        CONVERSATION_ID,
        `üìù –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n${msg?.text || ""}`
      );
      await ctx.reply(
        "‚úÖ –í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–µ—Å–µ–¥—É!"
      );
    } catch (sendError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥—É:", sendError);
      await ctx.reply(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–µ—Å–µ–¥—É –Ω–µ —É–¥–∞–ª–∞—Å—å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –µ–≥–æ –ø–æ–∑–∂–µ."
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
}
